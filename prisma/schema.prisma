generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.VarChar(2000)
  refresh_token_expires_in Int?
  access_token             String? @db.VarChar(2000)
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(2000)
  session_state            String? @db.VarChar(2000)
  oauth_token_secret       String? @db.VarChar(2000)
  oauth_token              String? @db.VarChar(2000)
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  title         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likedPosts    LikedPosts[]
  comments      Comment[]
  levelsPosts   Levels[]
  appleMicros   AppleMicro[]
  appleMacros   AppleMacro[]
  ouraPosts     Oura[]
  miscPosts     Misc[]
  gender        Gender       @default(NONE)
  birthday      DateTime?
  role          Role         @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  content     String       @db.Text
  contentHtml String       @db.Text
  cadence     String       @db.VarChar(255)
  endDate     DateTime
  type        String       @db.VarChar(255)
  hidden      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  likedBy     LikedPosts[]
  comments    Comment[]

  @@unique([endDate, cadence, type, authorId], name: "Post_endDate_cadence_type_authorId_unique_constraint")
  @@index([authorId])
  @@fulltext([title, content])
}

model LikedPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  contentHtml String   @db.Text
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String

  @@index([authorId])
  @@index([postId])
}

model Email {
  id    String @id @default(cuid())
  email String @unique
}

model Levels {
  id                Int      @id @default(autoincrement())
  date              DateTime
  localTime         DateTime
  type              String
  notes             String   @db.Text
  link              String   @db.VarChar(255)
  logDetail         Json? // can be perceivedFullness, foodType (cooking, restaurant), supplements, coffee, alcohol, marijuana
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String

  @@unique([localTime, authorId], name: "Levels_localTime_authorId_unique_constraint")
  @@index([authorId])
  @@fulltext([notes])
}

model AppleMicro {
  id           Int      @id @default(autoincrement())
  date         DateTime
  start        DateTime
  type         String   @db.VarChar(255)
  duration     Int
  activeEnergy Float
  maxHeartRate Int
  avgHeartRate Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String

  @@unique([start, type, authorId], name: "AppleMicro_start_type_authorId_unique_constraint")
  @@index([authorId])
}

model AppleMacro {
  id             Int      @id @default(autoincrement())
  date           DateTime
  activeEnergy   Float?
  basalEnergy    Float?
  exerciseTime   Float?
  standHour      Int?
  standTime      Float?
  flightsClimbed Float?
  mindfulMinutes Float?
  stepCount      Float?
  vo2Max         Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  author         User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String

  @@unique([date, authorId], name: "AppleMacro_date_authorId_unique_constraint")
  @@index([authorId])
}

model Oura {
  id                      Int       @id @default(autoincrement())
  date                    DateTime
  bedTime                 DateTime?
  wakeUpTime              DateTime?
  totalSleep              Int?
  totalAwake              Int?
  totalREM                Int?
  totalDeep               Int?
  sleepEfficiency         Int?
  latencyDuration         Int?
  lowestRestingHeartRate  Float?
  averageRestingHeartRate Float?
  averageHRV              Int?
  temperatureDeviation    Float?
  respiratoryRate         Float?
  inactiveTime            Int?
  averageMET              Float?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  author                  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId                String

  @@unique([date, authorId], name: "Oura_date_authorId_unique_constraint")
  @@index([authorId])
}

model Misc {
  id                Int      @id @default(autoincrement())
  date              DateTime
  weight            Float?
  fatMass           Float?
  boneMass          Float?
  muscleMass        Float?
  hydration         Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String

  @@unique([date, authorId], name: "Misc_date_authorId_unique_constraint")
  @@index([authorId])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  NONE
  MALE
  FEMALE
  INTERSEX
}
